Index: b/apertium/interchunk.cc
===================================================================
--- a/apertium/interchunk.cc	(revision 57368)
+++ b/apertium/interchunk.cc	(working copy)
@@ -108,10 +108,15 @@
   me = new MatchExe(t, finals);

   // attr_items
+  bool recompile_attrs = Compression::string_read(in) != string(pcre_version());
   for(int i = 0, limit = Compression::multibyte_read(in); i != limit; i++)
   {
     string const cad_k = UtfConverter::toUtf8(Compression::wstring_read(in));
     attr_items[cad_k].read(in);
+    wstring fallback = Compression::wstring_read(in);
+    if(recompile_attrs) {
+      attr_items[cad_k].compile(UtfConverter::toUtf8(fallback));
+    }
   }

   // variables
Index: b/apertium/postchunk.cc
===================================================================
--- a/apertium/postchunk.cc	(revision 57368)
+++ b/apertium/postchunk.cc	(working copy)
@@ -107,10 +107,15 @@
   me = new MatchExe(t, finals);

   // attr_items
+  bool recompile_attrs = Compression::string_read(in) != string(pcre_version());
   for(int i = 0, limit = Compression::multibyte_read(in); i != limit; i++)
   {
     string const cad_k = UtfConverter::toUtf8(Compression::wstring_read(in));
     attr_items[cad_k].read(in);
+    wstring fallback = Compression::wstring_read(in);
+    if(recompile_attrs) {
+      attr_items[cad_k].compile(UtfConverter::toUtf8(fallback));
+    }
   }

   // variables
Index: b/apertium/transfer.cc
===================================================================
--- a/apertium/transfer.cc	(revision 57368)
+++ b/apertium/transfer.cc	(working copy)
@@ -22,6 +22,7 @@
 #include <apertium/string_utils.h>
 #include <lttoolbox/compression.h>
 #include <lttoolbox/xml_parse_util.h>
+#include <pcre.h>

 #include <cctype>
 #include <iostream>
@@ -110,10 +111,15 @@
   me = new MatchExe(t, finals);

   // attr_items
+  bool recompile_attrs = Compression::string_read(in) != string(pcre_version());
   for(int i = 0, limit = Compression::multibyte_read(in); i != limit; i++)
   {
     string const cad_k = UtfConverter::toUtf8(Compression::wstring_read(in));
     attr_items[cad_k].read(in);
+    wstring fallback = Compression::wstring_read(in);
+    if(recompile_attrs) {
+      attr_items[cad_k].compile(UtfConverter::toUtf8(fallback));
+    }
   }

   // variables
Index: b/apertium/transfer_data.cc
===================================================================
--- a/apertium/transfer_data.cc	(revision 57368)
+++ b/apertium/transfer_data.cc	(working copy)
@@ -180,6 +180,7 @@
 void
 TransferData::writeRegexps(FILE *output)
 {
+  Compression::string_write(string(pcre_version()), output);
   Compression::multibyte_write(attr_items.size(), output);

   map<wstring, wstring, Ltstr>::iterator it, limit;
@@ -187,8 +188,8 @@
   {
     Compression::wstring_write(it->first, output);
     ApertiumRE my_re;
-    //wcerr << it->second << endl;
     my_re.compile(UtfConverter::toUtf8(it->second));
     my_re.write(output);
+    Compression::wstring_write(it->second, output);
   }
 }
Index: b/apertium/transfer_mult.cc
===================================================================
--- a/apertium/transfer_mult.cc	(revision 57368)
+++ b/apertium/transfer_mult.cc	(working copy)
@@ -107,10 +107,15 @@
   me = new MatchExe(t, finals);

   // attr_items
+  bool recompile_attrs = Compression::string_read(in) != string(pcre_version());
   for(int i = 0, limit = Compression::multibyte_read(in); i != limit; i++)
   {
     string const cad_k = UtfConverter::toUtf8(Compression::wstring_read(in));
     attr_items[cad_k].read(in);
+    wstring fallback = Compression::wstring_read(in);
+    if(recompile_attrs) {
+      attr_items[cad_k].compile(UtfConverter::toUtf8(fallback));
+    }
   }

   // variables

